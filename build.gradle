apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'se.zensum'
version = '0.1.4'
description = 'description of project'

defaultTasks 'run'

buildscript {
    ext.kotlin_version = '1.2.30'
    ext.jvm_version = '1.8'
    ext.junit_platform_version = '1.1.0'
    ext.ktor_version = '0.9.1'
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
    }
}

apply plugin: "org.junit.platform.gradle.plugin"

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven {
        url "https://jitpack.io"
        if(System.getenv("JITPACK_TOKEN") == null) {
            System.err.println("JITPACK_TOKEN was null. Only public repositories will be accessible.")
        }
        credentials { username System.getenv("JITPACK_TOKEN") ?: "" }
    }
}

dependencies {
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:0.22.5'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.5'
    
    // Junit
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testCompile "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    
    // Logging
    compile 'io.github.microutils:kotlin-logging:1.4.9'
    
    // Project specific dependencies (disabled by default)
    compile "io.ktor:ktor-server-core:$ktor_version"

    compile 'com.auth0:java-jwt:3.3.0'
    compile 'com.auth0:jwks-rsa:0.3.0'
}

junitPlatform {
    platformVersion = junit_platform_version
}

compileKotlin {
    sourceCompatibility = jvm_version
    kotlinOptions {
        jvmTarget = jvm_version
    }
}

compileJava {
    sourceCompatibility = jvm_version
    targetCompatibility = jvm_version
    options.incremental = true
    options.encoding = 'UTF-8'
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

// Important: All classes containing test cases must match the
// the regex pattern "^.*Tests?$" to be picked up by the junit-gradle plugin.
// Test cases can NOT exist outside a class, since then it will not be picked up by Gradle.
sourceSets {
    main.resources.srcDirs += 'src/main/resources'
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'
    main.java.srcDirs += 'src/main/java'
    test.java.srcDirs += 'src/test/java'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts for faster execution'
    gradleVersion = '4.4'
}